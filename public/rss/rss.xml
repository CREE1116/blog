<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>[크리의 끄적끄적] 크리의 끄적끄적</title>
        <link>https://cree-devblog.kro.kr</link>
        <description>간단한 개발을 하는 크리의 블로그 입니다</description>
        <lastBuildDate>Tue, 29 Apr 2025 05:16:40 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>generate-rss</generator>
        <language>ko</language>
        <image>
            <title>[크리의 끄적끄적] 크리의 끄적끄적</title>
            <url>https://cree-devblog.kro.kr/images/normal-cree.jpg</url>
            <link>https://cree-devblog.kro.kr</link>
        </image>
        <copyright>All rights reserved since 2023-03-29, Cree</copyright>
        <item>
            <title><![CDATA[첫 글]]></title>
            <link>https://cree-devblog.kro.kr/blog/2023_03_29_첫글</link>
            <guid>2023_03_29_첫글.mdx</guid>
            <pubDate>Wed, 29 Mar 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[블로그 제작후 첫 소감]]></description>
            <content:encoded><![CDATA[
---

# 블로그를 만든 이유

- 그래도 한명의 컴공과 학생으로써 기술 블로그 하나는 있어야 하지 않나 라는 생각을 했었다.
  그렇게 velog등등 이것저것 맛을 봤는데, 편하고 좋기는 하지만 그래도 내가 코딩을 하는 인간인데 한번쯤 만들어보는것이 좋지 않나 하여 이렇게 기본적인 블로그를 만들었다.

# 사용한 스텍

- Next.js
- React.js
- ContantLayer

앞으로 무언가 만들게 된다면 그 과정을 이곳에 기록할 예정이며, 포스트 뿐만 아니라 기능상으로도 업데이트를 통해 좀더 블로그 구실을 하는 블로그를 만들어 볼까 한다.
]]></content:encoded>
            <author>leejongmin774@gmail.com (Cree)</author>
            <category>블로그</category>
            <category>첫글</category>
            <enclosure url="https://cree-devblog.kro.kr//images/java-jeans.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[ProgressBar + Comment 구현]]></title>
            <link>https://cree-devblog.kro.kr/blog/2023_03_30_ProgressBar+Comment</link>
            <guid>2023_03_30_ProgressBar+Comment.mdx</guid>
            <pubDate>Thu, 30 Mar 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[스크롤에 따른 Progress Bar와 giscus 댓글 기능 구현]]></description>
            <content:encoded><![CDATA[
---

# 개발할 부분 선정 이유

### ProgressBar

> 이야 이거 멋있다!

참고용으로 다른 분들의 블로그를 찾아볼때마다 눈에 들어오던것이었다.
사실 막 그닥 필요한 장치는 아니지만 막 어려워 보이지 않아서 만들어보기로 했다

### Comment

> 블로그라면 있어야지!

기술블로그니까! 있어야지! 라는 마음으로 도입해보기로 했다.

---

## ProgressBar

progressbar의 작동원리는 이렇다.

1. 페이지 로드시 지금 스크롤과 뷰포트를 읽어와 퍼센트로 변환한다.
2. 스크롤 리스너를 통해 스크롤이 발생할때마다 읽어온다.
3. 읽어온 스크롤 퍼센트(?)에 따라 ProgressBar의 X를 Translate를 통해 변화시킨다.

전체 코드는 이렇다.

```javascript
import { useEffect, useState } from "react";
const Progressbar = () => {
  const [percentage, setPercentage] = useState(100);

  const getScrollPercentage = () => {
    const scroll = document.documentElement.scrollTop;
    const scrollHeight = document.documentElement.scrollHeight;
    const clientHeight = document.documentElement.clientHeight;
    const viewport = scrollHeight - clientHeight;
    const percentage = (scroll / viewport) * 100;
    return setPercentage(percentage);
  };

  useEffect(() => {
    getScrollPercentage();
    window.addEventListener("scroll", getScrollPercentage);
    return () => window.removeEventListener("scroll", getScrollPercentage);
  }, []);
  return (
    <div className="fixed top-0 left-0 right-0">
      <div
        className="bg-red-500 h-1"
        style={{ transform: `translateX(${percentage - 100}%)` }}
      />
    </div>
  );
};
export default Progressbar;
```

여기서 `useEffect` 부분을 보면 `getScrollPercentage()`가 한번 호출 되고 난 뒤 윈도우리스너를 등록하는데
이는 글이 너무 짧아서 스크롤이 발생하지 않는 경우 Progressbar가 0%에서 고정되어있는 현상을 해결하기 위해 작성되었다.

```javascript
const getScrollPercentage = () => {
  const scroll = document.documentElement.scrollTop;
  const scrollHeight = document.documentElement.scrollHeight;
  const clientHeight = document.documentElement.clientHeight;
  const viewport = scrollHeight - clientHeight;
  const percentage = (scroll / viewport) * 100;
  return setPercentage(percentage);
};
```

이부분은 스크롤을 %로 구하는 부분이다.
스크롤을 viewport값으로 나눠서 퍼센트로 구하는 코드이다.

```
<div className="fixed top-0 left-0 right-0">
  <div
    className="bg-red-500 h-1"
    style={{ transform: `translateX(${percentage - 100}%)` }}
  />
</div>
```

tailwindCss 를 사용했으며
`fixed top-0 left-0 right-0`는 progressbar를 최상단에 고정하는 부분이다.  
`bg-red-500 h-1`는 progressbar를 빨간색으로 하고, 높이를 정하는 부분이다.  
`` style={{transform: `translateX(${(percentage - 100)}%)`}} ``는 퍼센트에 따라서 길이를 변형시키는 코드이다.  
`percentage - 100` 인 이유는 왼쪽부터 오른쪽으로 진행해야 하기 때문이다.
(궁금하면 그냥 `percentage`해봐라 뭔 소리인지 이해할것이다.)

이렇게 Next.js의 컴포넌트로 구현을 해두었다.

---

### Comment

댓글은 DB를 만들어서 API를 통해 구현해도 되지만 간단한 사이드프로젝트이기때문에 DB구현부터 백앤드 구현은 좀 투머치라고 생각해서 이미 있는 방법들중 Giscus를 이용하기로 했다.

giscus를 이용하는 이유는 다음과 같다.

1. 일단 공식 문서가 한글화되어있는 점에서 접근성이 편하다.
2. 깃허브의 토론을 이용하기때문에 깃허브를 사용하는 사람이라면 접근성도, 보기도 좋다.
3. Next.js용 페키지가 있다...(구현할거 없어서 짱 좋음)

간단하게 사용하는법을 적어두자면  
[giscus페이지](https://giscus.app/ko)

    1. 깃헙에서 Public으로 레파지토리를 하나 판다(블로그를 배포한다고 파둔 레파지토리가 Public이라면 그냥 그거 써도 된다.)
    2. 토론 탭을 활성화 시킨다.(세팅 들어가서 General에서 쭉 내리다 보면 있다.)
    3. giscus문서에 가서 필요한것들을 적는다.(문서 링크는 위쪽에 있다.)
    4. 나온 값들을 일단 킵해둔다.
    5. giscus 페키지를 설치한다.
    	(React나 Next.js라면
    	yarn add @giscus/react
    	or
    	npm i @giscus/react)
    를 통해 설치할수있다.
    6.잘 쓴다.

다음은 전체 코드이다.

```javascript
import Giscus from "@giscus/react";

const Comment = () => {
  return (
    <div className="border-t-[100px] border-transparent">
      <Giscus
        id="comments"
        repo="내 레파지토리에욧!"
        repoId="내 레파지토리 아이디에욧!"
        category="General"
        categoryId="문서에 기입할거 다 적으면 알아서 나와욧!"
        mapping="pathname"
        reactionsEnabled="1"
        emitMetadata="0"
        inputPosition="top"
        theme="light"
        lang="ko"
        loading="lazy"
      />
    </div>
  );
};

export default Comment;
```

(진짜 뭐 없다...)

이렇게 구현된 것들은 지금 이 포스트를 보고있는 지금 만나볼수 있다.

그럼 오늘은 이만.. 자자..
]]></content:encoded>
            <author>leejongmin774@gmail.com (Cree)</author>
            <category>Next.js</category>
            <category>React</category>
            <category>TailwindCss</category>
            <category>Giscus</category>
            <category>progressbar</category>
            <category>comment</category>
            <enclosure url="https://cree-devblog.kro.kr/images/그냥크리.jpeg" length="0" type="image/jpeg"/>
        </item>
        <item>
            <title><![CDATA[썸네일, 태그, 다크모드 구현(1)]]></title>
            <link>https://cree-devblog.kro.kr/blog/2023_04_05_썸네일, 태그,다크모드 구현(1)</link>
            <guid>2023_04_05_썸네일, 태그,다크모드 구현(1).mdx</guid>
            <pubDate>Wed, 05 Apr 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[tailwindcss를 통한 다크모드와 화면에 고정되어있는 레이아웃, 블로그 페이지에서 볼수있는 썸네일을 구현]]></description>
            <content:encoded><![CDATA[
---

생각보다 자주 블로그를 수정하면서도 포스팅하기가 귀찮아져서 미루고 있다가 진행한 순서대로 차근차근 써보려고 한다.

# 수정된 부분!

1. 다크모드가 추가되었다.(이 포스트에선 이부분만 다룬다.)
2. 상단 레이아웃이 따라다닌다.
3. blog 페이지에서 각 포스팅별 썸네일과 tag가 표시된다.

## 다크모드

    	> "다크모드는 개발자의 아주 소중한 친구지"

그냥 급하게 지어내서 만들어본 말이다.  
그만큼 오랜시간 화면을 보는 개발자에게 있어서 다크모드는 중요하기에 한번 추가해 봤다.

일단 우리가 지금 사용하는 tailwind css는 아주 간단하게 다크모드를 지원한다.

`dark: ` 라는 키워드를 통해 다크모드시 적용될 css를 기입할수있다.

이런식으로 적용한 부분을 하나 하나 다 쓰자고 하면 너무 많으니 대표적으로 몇개만 가져온다면

```typescript

<header
className={`fixed top-0 left-0 right-0 bg-white dark:bg-gray-800`}
>
```

이렇게 원랜 흰색이지만 다크모드에서 어두운 회색으로 바뀌게 할수 있다.

그외에 너무 자주 쓰이는 것들은 `global.css` 에 적용해 두었는데 기본적인 text가 흰색으로 바뀌거나 배경이 짙은 회색으로 바뀌게 하는 코드다

```css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  body {
    @apply bg-white text-black dark:bg-gray-800 dark:text-white;
  }
}
```

근데 이런식으로 하면 tailwind css는 기본적으로 `media`에 따라 다크모드를 조절하게 되어서 기기의 세팅값만을 따라가게 된다.

분명 심플하고 섹시한 구현방식은 맞지만 내가 원하는건 그것이 아니다.

뭔가 장난기 넘치고 쓸모없어 보이게 전구를 키면 밝아지고 끄면 어두워지는 그런걸 원한단 말이다.

이걸 구현할수 있는 방법이 무엇일까 하고 구글링을 열심히 해보았다.

그 결과 찾아낸것이

`tailwindcss.config`에서 `darkmode`속성을 `"class"` 로 지정해주는 것이었다.

```typescript
module.exports = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}",
  ],
  darkMode: "class",
  theme: {
    extend: {},
  },
  plugins: [require("@tailwindcss/typography")],
};
```

이렇게 되면 `_app.tsx` (최상위 테그라고 생각하자 그냥)의 classname에서 다크모드를 지정해줄수 있다.

그런데 이렇게 하면 좀 뭔가 어설퍼진다.

글의 색만 바뀌고 여전히 배경색은 시스템 테마를 따라가게 된다.

이유는 막 엄청 잘 알겠는건 아니지만 배경과같은 요소는 classname을 바꾼다고해서 media를 아에 무시하지 않는 모양이었다?..
(이유를 아는 분은 좀 알려주세요 )

그래서 검색을 또 열심히 한 결과 `next-themes`를 사용하기로 했다.

> npm install next-themes
> or
> yarn add next-themes

를 통해 가볍게 설치할수 있다.

`next-themes`를 사용하면 `useTheme()`라는 훅과 `ThemeProvider`라는 컴포넌트를 사용할수 있다.

이제 최상위 엘리먼트를 `ThemeProvider`로 감싸고 `attribute` 속성을 `class`로 설정한다.

```typescript
import { ThemeProvider } from "next-themes";
import "../styles/globals.css";

import type { AppProps } from "next/app";

function MyApp({ Component, pageProps }: AppProps) {
  return (
    <ThemeProvider attribute="class">
      <Component {...pageProps} />
    </ThemeProvider>
  );
}

export default MyApp;
```

이제 우리 맘대로 태마를 바꿀수 있게 되었다.

그럼 간단하게 ` useTheme`을 사용해 테마 변경 버튼을 만들어 본다.

```typescript
import { useTheme } from "next-themes";
import Image from "next/image";

const Togglebtn = () => {
  const { theme, setTheme } = useTheme();

  return (
    <button
      type="button"
      onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
      // 클릭시 다크모드면 라이트로 바꿈
      className={`mr-3 animate-pulse`}
    >
      {theme === "light" ? (
        <Image
          src={`/on.png`}
          alt={""}
          width={30}
          height={30}
          className={`rounded-3xl hover:cursor-pointer`}
        />
      ) : (
        <Image
          src={`/off.png`}
          alt={""}
          width={30}
          height={30}
          className={`rounded-3xl hover:cursor-pointer`}
        />
      )}
    </button>
  );
};

export default Togglebtn;
```

`useTheme`은 약간 테마 전용 `useState`와 비슷하다고 생각하면 된다.

이렇게 다크모드가 추가되었다.
]]></content:encoded>
            <author>leejongmin774@gmail.com (Cree)</author>
            <category>tailwindcss</category>
            <category>next.js</category>
            <category>blog</category>
            <category>darkmode</category>
            <category>tags</category>
            <enclosure url="https://cree-devblog.kro.kr/images/그냥크리.jpeg" length="0" type="image/jpeg"/>
        </item>
        <item>
            <title><![CDATA[썸네일, 태그, 다크모드 구현(2)]]></title>
            <link>https://cree-devblog.kro.kr/blog/2023_04_05_썸네일, 태그,다크모드 구현(2)</link>
            <guid>2023_04_05_썸네일, 태그,다크모드 구현(2).mdx</guid>
            <pubDate>Wed, 05 Apr 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[tailwindcss를 통한 다크모드와 화면에 고정되어있는 레이아웃, 블로그 페이지에서 볼수있는 썸네일을 구현]]></description>
            <content:encoded><![CDATA[
---

1탄이 다크모드만으로 좀 길어진것 같아 2편으로 잘라서 나머지를 한번 해보려고 한다.

# 수정된 부분!

1. 다크모드가 추가되었다.
2. 상단 레이아웃이 따라다닌다.
3. blog 페이지에서 각 포스팅별 썸네일과 tag가 표시된다.

나머지 레이아웃과 tag를 이번 포스트에서 알아보자

## 레이아웃?

사실 뭐 별거 없다...

```jsx
<header
className={`fixed top-0 left-0 right-0 bg-white dark:bg-gray-800`}
>
	<div
	className={`w-full flex flex-row justify-between items-center my-1 shadow-md p-3 z-50`
	>
		<Link href="/">
			<a className={"flex flex-row items-center"}>
				<Image
				src={`/java-jeans.jpg`}
				alt="로고"
				width={40}
				height={40}
				objectFit={`cover`}
				className={`rounded-full`}
				/>
				<span className={`mx-2 font-extralight text-lg`}>
					{metadata.title}
				</span>
			</a>
		</Link>
		<Togglebtn />
		<Nav />
	</div>
</header>
```

저기서 `header`부분에 `fixed` 를 이용해서 상단에 절대 좌표로 고정하면 된다...  
개선 하긴 했으니까 넣은건데 굳이 머 티를 낼것인가 싶긴 하다.

## 썸네일

어떤 식으로 만들까 고민을 했던 부분이다.

현제 블로그의 구조는 `./post` 에 마크다운으로 작성된 글을 올리면 `contantlayer`에서 빌드시 자동으로 JSON으로 바꿔주고, 이것을 불러오는 형식으로 작동한다.

즉 내가 편하려면 이 마크다운에서 썸넬을 결정할수 있어야 한다고 생각을 했다.

그러기 위해서 `contantlayer.config`를 수정했어야 했는데 수정하는 김에 tags기능도 같이 구현해보기로 했다.

```Typescript
import { defineDocumentType, makeSource } from "contentlayer/source-files";

export const Post = defineDocumentType(() => ({
	name: "Post",
	contentType: "mdx",
	filePathPattern: `**/*.mdx`,
	fields: {
		title: { type: "string", required: true },
		date: { type: "string", required: true },
		description: { type: "string", required: true },
		tags: { type: "list", of: { type: "string" } },
		image: { type: "string" },
	},
}));

export default makeSource({
	contentDirPath: "posts",
	documentTypes: [Post],
});
```

`fields`항목에서 tags와 image를 추가했다.

이렇게 되면 mdx형식으로 포스팅을 작성할때 두 항목을 기입해 자동으로 JSON을 생성하도록 할수있다.

```
---
title: 썸네일, 태그, 다크모드 구현(1)
date: 2023-04-05
description: tailwindcss를 통한 다크모드와 화면에 고정되어있는 레이아웃, 블로그 페이지에서 볼수있는 썸네일을 구현
tags: [tailwindcss, next.js, blog, darkmode, tags]
image: /java-jeans.jpg
---
```

(이런 식으로 기입한다.)

그럼 자동으로 생성된 JSON에는 image항목에 내가 기입한 이미지의 위치가 들어가게 될것이고, 이걸 읽어와서 옆에 이쁘게 놓아주기만 하면 되는것이다.

다만!.. 이미지를 넣지 않는 경우 그냥 횡 하니 비어있는것이 꼴보기 싫기에 간단하게 제목정도를 적어두는 회색 창을 하나 만들것이다.

```Typescript
<div className="flex-initial w-[30%] relative">
	{imagesrc !== undefined ? (
		<Image
		src={imagesrc}
		alt={title}
		quality={80}
		layout="fill"
		objectFit="cover"
		objectPosition="center"
		className={`absolute, rounded-2xl`}
		/>
	) : (
		<div className="absolute bg-gray-500 rounded-2xl w-full h-full text-center py-8 font-bold text-md text-white">
			{title}
		</div>
	)}
</div>
```

또한 테그 기능을 구현할 것이니, 리스트 형태의 태그를 출력하는 간단한 span도 하나 만들어 보자

```Typescript
{tags !== undefined ? tags.map((tag, index) => {
	return (
		<span
		key={index}
		className={`text-xs text-gray-400 font-light mt-1`}
		>
			#{tag}
		</span>
		);
	})
: null}
```

(전체 코드)

```javascript
import Link from "next/link";
import Image from "next/image";

const BlogPost = ({ date, title, des, slug, tags, imagesrc }) => {
  return (
    <Link href={`/blog/${slug}`} passHref>
      <a className="w-full my-7 hover:-translate-x-1.5 flex">
        <div className="flex-initial w-[70%]">
          <div className="font-medium text-xs text-gray-400">
            {date.split("T")[0]}
          </div>
          <div className={`font-extrabold text-2xl mt-2`}>{title}</div>
          <div className={`font-medium text-gray-600 text-xl mt-1`}>{des}</div>
          {tags !== undefined
            ? tags.map((tag, index) => {
                return (
                  <span
                    key={index}
                    className={`text-xs text-gray-400 font-light mt-1`}
                  >
                    #{tag}
                  </span>
                );
              })
            : null}
        </div>
        <div className="flex-initial w-[30%] relative">
          {imagesrc !== undefined ? (
            <Image
              src={imagesrc}
              alt={title}
              quality={80}
              layout="fill"
              objectFit="cover"
              objectPosition="center"
              className={`absolute, rounded-2xl`}
            />
          ) : (
            <div className="absolute bg-gray-500 rounded-2xl w-full h-full text-center py-8 font-bold text-md text-white">
              {title}
            </div>
          )}
        </div>
      </a>
    </Link>
  );
};

export default BlogPost;
```

이렇게 된다.

관련된 정보는 `blog/index.tsx`에서 받아오게 된다.

```typescript
const Blog = ({ posts }: InferGetStaticPropsType<typeof getStaticProps>) => {
  return (
    <Container>
      <div className={`mt-10 flex flex-col`}>
        {posts.map((post) => (
          <BlogPost
            date={post.date}
            title={post.title}
            des={post.description}
            slug={post._raw.flattenedPath}
            key={post._id}
            tags={post.tags}
            imagesrc={post.image}
          />
        ))}
      </div>
    </Container>
  );
};
```

다음 포스팅에서 돌아오게따
바꾼거 이것저것 있는데 정리하려니 귀찮다.
]]></content:encoded>
            <author>leejongmin774@gmail.com (Cree)</author>
            <category>tailwindcss</category>
            <category>next.js</category>
            <category>blog</category>
            <category>darkmode</category>
            <category>tags</category>
            <enclosure url="https://cree-devblog.kro.kr/images/그냥크리.jpeg" length="0" type="image/jpeg"/>
        </item>
        <item>
            <title><![CDATA[SEO에 관련된 것들을 구현해보자]]></title>
            <link>https://cree-devblog.kro.kr/blog/2023_04_12_SEO관련것들</link>
            <guid>2023_04_12_SEO관련것들.mdx</guid>
            <pubDate>Wed, 12 Apr 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[seo에 관련된 사이트맵, 메타테그, rss등을 적용하고 서치콘솔과 서치 어드바이저에 등록해보자]]></description>
            <content:encoded><![CDATA[
---

개발은 필받으면 한번에 몰아하지만 포스팅은 천천히 쓰는 나란 사람, 결국 포기하고 아무렇게나 하기로 했다.

오늘은 이 블로그의 seo를 위해 한것들을 알아보고자 한다.

대략

1. 메타테그
2. rss
3. sitemap

순서로 간략하게만 알아보려고 한다.

## 1. 메타테그

> `<meta>`

이 테그는 이 html문서의 메타데이터를 표기하는 테그로 알고있다(?)

우리가 흔히 `<head>` 테그 안에 들어가는 `<title>` 테그라던가 `<link>` 테그들에서 표현하지 못하는 값들을 표시하게 되는데

필자는 description 과 keyword를 사용했다.

사실 좀 더 많이 사용하긴 했지만 이건 OpenGraph지원을 위한것이니 다음 포스팅에서 다뤄보도록 하겠다.

이 다음은 코드를 보면서 이야기 해보고자 한다.

```typescript
const router = useRouter();
const meta = {
  title: metadata.title,
  description: metadata.description,
  author: metadata.author,
  site_name: metadata.site_name,
  siteUrl: metadata.siteUrl,
  url: router.asPath,
  ...props.customMeta,
};
```

`<head>`에 들어갈 내용들은 가장 먼저 `json` 의 형태로 담아둔다.
꼭 메타데이터를 만들기 위한것이 아니라 이것저것 사용될 여지가 많기 때문에 쓰는것이다.

참고로 `metadata`는 data폴더에 있는 단순한 타입스크립트 파일이다.

```Typescript
const metadata = {
	title: "크리의 끄적끄적",
	description: "간단한 개발을 하는 크리의 블로그 입니다",
	site_name: "[크리의 끄적끄적]",
	author: "Cree",
	siteUrl: "https://cree-devblog.kro.kr",
	email: 이거 왜적어놨더라,
};

export default metadata;
```

그리고 내 블로그의 `<head>`테그가 있는 컴포넌트에서 `<meta>`테그를 사용한 부분이다.

```Typescript
<Head>
	<meta name="description" content={meta.description} />
	{meta.keyword !== undefined ? (
		<meta name="keyword" content={meta.keyword} />
	) : null}
<Head/>
```

상당히 보잘것 없다... 머 그래도 SEO에겐 좀 중요한 부분이다.

## 2.RSS

> RSS(Really Simple Syndication, Rich Site Summary)란 **블로그처럼 컨텐츠 업데이트가 자주 일어나는 웹사이트에서, 업데이트된 정보를 쉽게 구독자들에게 제공하기 위해 XML을 기초로 만들어진 데이터 형식**입니다.

구글에 그냥 검색해봤더니 기상청에서 이렇게 설명해 주더라

![img](/postImages/2023_04_12_1st.png)

(따란...)

즉 그냥 내 블로그 이렇게 생겼어요~~ 하고 말해주는 거라고 생각하면 된다.

이와 유사하게 `ATOM` 도 있는데 이 역시 비슷하다.

현제 나의 블로그의 rss는 [https://cree-devblog.kro.kr/rss/rss.xml](https://cree-devblog.kro.kr/rss/rss.xml)로 들어가면 볼수있다.

이 rss를 매번 내가 작성할수는 없기 때문에 feed라는 플러그인? 페키지를 사용했는데

손쉽게 rss와 atom은 물론 Json Feed도 만들어주는 친구이다... 만

Json피드는 아직 지원하는곳이 많이 없는듯 하다

나는 이 블로그를 vercel을 통한 정적페이지로 배포중이기때문에 빌드시에 이 rss를 생성하며

```json
"build": "next build",
"postbuild": "next-sitemap && npm run rss",
"rss": "ts-node --project tsconfig.node.json ./scripts/generate-rss.ts"
```

그렇기에 이러한 빌드 커멘드를 사용한다.

그리고 저기서 실행하는 `generate-rss.ts`를 살펴보자면

```typescript
import { Feed } from "feed";
import { writeFileSync } from "fs";

import PostJson from "../.contentlayer/generated/Post/_index.json";
import metadata from "../data/metadata";

const master = {
  name: metadata.author,
  link: metadata.siteUrl,
  email: metadata.email,
};

const feed = new Feed({
  title:
    metadata.title.length > 0
      ? `[크리의 끄적끄적] ${metadata.title}`
      : metadata.site_name,

  description: metadata.description,
  id: metadata.siteUrl,
  link: metadata.siteUrl,
  language: "ko",
  image: `${metadata.siteUrl}/images/그냥크리.jpg`,
  copyright: `All rights reserved since 2023-03-29, ${master.name}`,
  generator: "generate-rss",
  feedLinks: {
    json: `${metadata.siteUrl}/rss/feed.json`,
    atom: `${metadata.siteUrl}/rss/rss-atom.xml`,
  },
  author: master,
});

PostJson.forEach((post) => {
  feed.addItem({
    title: post.title,
    id: post._id,
    link: `${metadata.siteUrl}/blog/${post._raw.flattenedPath}`,
    description: post.description,
    content: post.body.raw,
    author: [master],
    image:
      post.image !== undefined
        ? `${metadata.siteUrl}/${post.image}`
        : `${metadata.siteUrl}/images/그냥크리.jpeg`,
    contributor: [master],
    date: new Date(post.date),
    category: post.tags.map((tag) => ({ name: tag, term: "Technologies" })),
  });
});
// Output: RSS 2.0
writeFileSync("public/rss/rss.xml", feed.rss2(), "utf-8");
// Output: Atom 1.0
writeFileSync("public/rss/rss-atom.xml", feed.atom1(), "utf-8");
// Output: JSON Feed 1.0
writeFileSync("public/rss/feed.json", feed.json1(), "utf-8");
```

Feed에 기본 정보를 넣고, 각 포스트의 정보를 읽어와 추가 한 다음 `wirteFileSync`로 작성해주기만 하면 된다.

## sitemap

어찌보면 이게 rss보다 먼저 나오는게 좋을것 같은데.. 머

아까 본 빌드커멘드에서 next-sitemap이라고 적힌걸 봤을것이다.

이게 그거다

이친구도 대부분의 플러그인들이 그러하듯 `config`에 따라 작동하며

자동으로 사이트맵과 `robot.txt`를 만들어주는 역할을 한다.

### 사이트맵

    내 사이트 지도다 여기 링크에 이거있고 언제 왔어요 라고 적어두는것이며, 이걸 검색포털의 크롤러가 읽는다.
    그냥 둬도 읽기야 하겠지만 이렇게 지도를 제공해주면 보다 빨리 읽을수 있다.

### robot.txt

    킹갓 크롤러님께 이 사이트를 어떻게 해주세요 라고 적어두는 문서이다.
    어떤 크롤러에게 허용할까, 어디까지만 읽게 할까 등등을 기입할수있따.

다음은 `next-sitemap`의 설정 파일이다

```Typescript
module.exports = {
	siteUrl: "https://cree-devblog.net",
	generateRobotsTxt: true,
	changefreq: "hourly",
	sitemapSize: 7000,
	priority: 1,
	robotsTxtOptions: {
// 정책 설정
		policies: [
			{
				userAgent: "*", // 모든 agent 허용
				allow: "/", // 모든 페이지 주소 크롤링 허용
				disallow: [
					"/exclude", // exclude로 시작하는 페이지 주소 크롤링 금지
				],
			},
// 추가 정책이 필요할 경우 배열 요소로 추가 작성
		],
	}, // robots.txt 옵션 설정
};
```

이것으로 포스팅을 마친다.. 다들 고생..
]]></content:encoded>
            <author>leejongmin774@gmail.com (Cree)</author>
            <category>SEO</category>
            <category>next.js</category>
            <category>blog</category>
            <category>sitemap</category>
            <category>rss</category>
            <category>jsonfeed</category>
            <category>search console</category>
            <enclosure url="https://cree-devblog.kro.kr/images/그냥크리.jpeg" length="0" type="image/jpeg"/>
        </item>
        <item>
            <title><![CDATA[티스토리 개설]]></title>
            <link>https://cree-devblog.kro.kr/blog/2024_05_03 티스토리 개설</link>
            <guid>2024_05_03 티스토리 개설.mdx</guid>
            <pubDate>Fri, 03 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[티스토리 블로그 개설 공지 및 코드 공개]]></description>
            <content:encoded><![CDATA[
---

next.js로 이 블로그를 만들고 호스팅도 하고 해봤지만, 글을 올리는것이나 이것저것 번거로운게 많아서 티스토리로 이전하려고 합니다.

기왕 옮기는 김에 이 블로그 소스코드도 공개하도록 하겠습니다.

어차피 외부 api쓰는것도 없고하니 씹고 뜯고 맛보고 즐겨주시면 될것 같습니다.

[블로그 소스코드 깃헙 링크](https://github.com/CREE1116/blog)

[새로 개설한 티스토리](https://cree-devblog.tistory.com/)
]]></content:encoded>
            <author>leejongmin774@gmail.com (Cree)</author>
            <category>blog</category>
            <category>tistory</category>
            <category>티스토리</category>
            <category>블로그이전</category>
            <category>소스코드 공개</category>
            <enclosure url="https://cree-devblog.kro.kr//images/normal-cree.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[A Comprehensive Study on Quantization Techniques for Large Language Models]]></title>
            <link>https://cree-devblog.kro.kr/blog/A Comprehensive Study on Quantization Techniques for Large Language Models</link>
            <guid>A Comprehensive Study on Quantization Techniques for Large Language Models.mdx</guid>
            <pubDate>Tue, 29 Apr 2025 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
### 0. 읽은 이유

양자화에 대한 기본적인 이해를 얻기 위해

---

### 1. 논문 정보

- **저자:** Jiedong Lang, Zhehao Guo, Shuyu Huang
- **학술지/학회:** IEEE
- **발표 연도:** 2024
- **DOI (Digital Object Identifier):** [10.1109/ICAIRC64177.2024.10899941](https://doi.org/10.1109/ICAIRC64177.2024.10899941)

---

### 2. 서론

- **연구 배경 및 중요성:** 지금의 llm과같은 ai는 너무나 거대하다. 이것은 거대한 컴퓨팅 파워, 막대한 에너지를 요구하기에 iot, 임베디드, 모바일등에 이식하기 어렵다. 그렇기에 이것을 해소하기위한 양자화에 대한 포괄적인 정리를 해보고자 한다.
- **주요 연구 질문 또는 목표:** 양자화는 무엇이며 어떤 방식들이 있나.
- **리뷰어의 첫인상 (간략 요약):** 레포트같은 느낌의 글

---

### 3. 본론

#### 3.1 내용 요약

양자화는 반올림같은거다. 모델에 있는 가중치를 FF32 -> INT8로 바꾸는것 (8비트 양자화) 처럼 아에 변수의 크기 자체를 줄여 용량을 줄이고, 계산을 용이하게 하는 기법이다.

##### 방법론

1. Range Mapping
   1. 그러니까 양자화를 얼만큼 할거냐, 8비트 양자화 에서 8비트가 이거
   2. Affine Quantization
      1. 원본 파라미터 W를 양자화된 Wq로 바꾸는 고전적 방식
      2. ![img](/postImages/스크린샷 2025-04-29 오후 12.57.46.png)
      3. S => 스케일링 펙터, Z => 제로포인트 , b = 비트수, α,β = 수 표현 범위
   3. Scale Quantization
      1. ![img](/postImages/스크린샷 2025-04-29 오후 1.04.59.png)
      2. ![img](/postImages/images/스크린샷 2025-04-29 오후 1.05.09.png)
      3. 제로포인트가 없다. 그렇기 때문에 원래의 x와 같이 0이 제로포인트고, 수의 범위도 α, -α 이다.
2. Quantization Granularity
   1. 위에서의 제로포인트, 스케일링 펙터를 **양자화 파라미터** 라고 하고, Quantization Granularity는 어떻게 범위를 나누어 양자화 파라미터를 적용할지이다.
   2. Per-layer Quantization
      1. 레이어 별로 다른 양자화 파라미터 / 같은 레이어는 같은 양자화 파라미터를 공유한다.
      2. 성능이 많이 떨어진다.
   3. Per-channel Quantization
      1. 채널별로 다른 양자화 파라미터
      2. 채널이란 CNN에서 많이 쓰는 용어인것같은데, 쭈욱 같이 계산하게 되는 원소들의 묶음이라고 보면 될것같다.
      3. 성능은 당연 Per-layer보다 앞서지만, 계산의 복잡도가 증가한다.
3. Quantization Calibration
   1. 양자화를 하게 되면, 수의 표현볌위가 줄어듦에따라 자연스럽게 가중치가 조정되는데, Quantization Calibration은 이 조정이 일어나기 전에, 최적의 값 범위를 찾는다(좀 더 자세하면 좋을텐데 뭘 찾는건데)
   2. Global Calibration
      1. 전체 데이터의 최대값과 최소값을 사용하여 단순하게 변환하지만 정확도가 떨어질 수 있다.
   3. Max Calibration
      1. 실제 데이터의 최대값을 사용하여 양자화 손실을 완화한다.
   4. KL Divergence Calibration
      1. 원본 데이터와 양자화된 데이터의 분포 차이(KL 발산)를 최소화하는 스케일링 팩터를 찾아 정보 손실을 줄인다.
   5. Percentile Calibration
      1. 데이터 분포의 특정 백분위수(예: 99.99% 또는 99.999%)를 기준으로 범위를 좁혀 양자화 성능을 향상시킨다.
4. Quantization Techniques
   1. Post-Training Quantization, PTQ
      1. 훈련이 끝난 모델을 가지고 양자화를 한다.
         1. 동적: 모델을 사용할때 양자화
         2. 정적: 미리 양자화를 해놓고 저장.
   2. Quantization-Aware Training, QAT
      1. 가상으로 양자화를 하고, 학습을 진행해서 모델이 양자화에 적응하도록 하는 방법.
      2. 양자화가 된것처럼 값을 제한하고(실제로는 높은 정밀도) 변형한 뒤, 트레이닝데이터를 그대로 사용하여 학습시킨다.
      3. 그렇게 모델이 가상으로 양자화된 값을 가지게 되면, 그 다음에 양자화한다.
   3. Weight Quantization
      1. 가중치만 양자화하고 활성화한수 값은 원래 정밀도를 유지한다.
   4. Activation-Aware Weight Quantization, AWQ
      1. 활성화 크기를 기반으로 중요한 가중치를 식별하여 전체 정밀도로 유지하고, 덜 중요한 가중치만 양자화하여 정확도 손실을 최소화하면서 계산 비용을 낮춘다.
   5. Attention-Aware Weight Quantization
      1. 헤시안 트레이스(?)를 사용하여 가중치 행렬의 중요도를 결정하고, 어텐션 점수에 따라 중요한 가중치는 높은 비트 정밀도로, 덜 중요한 가중치는 낮은 비트 정밀도로 할당하는 혼합 정밀도 방식을 사용한다.

LLM에서는 주로 PTQ와 QAT가 사용된다.

- PTQ는 구현이 간단하고 배포가 빠르지만 상당한 정확도 손실이 발생할 수 있다.
- QAT는 훈련 중 양자화를 시뮬레이션하여 모델이 낮은 정밀도에 적응하게 하므로 더 정확하지만, 추가훈련이 필요하다.

##### 결론

다양한 양자화 기법의 성능은 양자화 정밀도에 따라 달라진다.
GPTQ는 4비트 정밀도에서 최적의 성능을 보이지만 3비트에서는 성능이 저하됩니다
LLM-QAT는 특정 혼합 정밀도 설정(예: 4비트 가중치, 4비트 KV 캐시, 8비트 활성화)에서 더 나은 정확도를 보여준다.
따라서 양자화 기법의 성능을 최대화하기 위해 적절한 정밀도 설정을 신중하게 선택해야 합니다.

#### 3.2 강점 분석

- 솔직히 별로.. 인터넷에서 긁어모을수 있는 지식의 나열이고, 자세하지도 않고, 연구도 없고, 제일 연구처럼 보이는 파트는 다른 논문에서 긁어온거다
- 그나마 좋은점은, 기본적인 지식이 없는상태에서 읽었을때 이런게 있구나 하고 훝어보기엔 좋다.

#### 3.3 약점 및 개선점 분석

---

### 4. 결론

- 이게 어떻게 올라갔지

---
]]></content:encoded>
            <author>leejongmin774@gmail.com (Cree)</author>
            <category>논문</category>
            <category>리뷰</category>
            <enclosure url="https://cree-devblog.kro.kr/images/그냥크리.jpeg" length="0" type="image/jpeg"/>
        </item>
        <item>
            <title><![CDATA[All you need is Attention]]></title>
            <link>https://cree-devblog.kro.kr/blog/All you need is Attention</link>
            <guid>All you need is Attention.mdx</guid>
            <pubDate>Tue, 29 Apr 2025 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
### 0. 읽은이유

일단 llm관련해서 연구를 하고싶으면, 최신 llm에 대해 어느정도 알아야한다고 생각해서 읽기 시작함.

---

### 1. 논문 정보

- **저자:** Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, Łukasz Kaiser, Illia Polosukhin
- **학술지/학회:** Advances in Neural Information Processing Systems 30
- **발표 연도:** 2017
- **DOI (Digital Object Identifier):**

---

### 2. 서론

- **연구 배경 및 중요성:** 기존 seq2seq모델의 한계를 해결하기 위한 새로운 언어모델의 제안한다.
- **주요 연구 질문 또는 목표:** CNN,RNN과 같은 신경망을 사용하지 않고,Attention 메커니즘만을 사용하여 만든 Transformer모델을 제안한다.
- 시퀀셜하게 단어를 예측하던 기존모델에서 벗어나, 문맥 전체 단어들의 관계를 파악하여 결과를 생성하는 새로운 모델을 제안한다.
- **리뷰어의 첫인상 (간략 요약):** 25년도에 읽고있기 때문에, 익숙해진 내용이라고는 생각하지만, 그당시 지금과 같은 llm이 많이 제안되지 않았던것을 생각하면, 당연 필수라고 생각되는 신경망을 제거하는게 얼마나 과감한 시도인지 알수있다.

---

### 3. 본론

#### 3.1 내용 요약

![[images/스크린샷 2025-04-29 오전 9.55.54.png]]
트렌스포머 아키텍처의 구조는 다음과같이, 인코더, 디코더로 나뉜다.

다음은 해당 도식에서 보이는 함수들의 대한 설명이다.

1. Multi-Head Attention
   1. 입력 벡터를 을 h개의 각기 다른 행렬의 곱을 통해 h개로 나눈뒤 각각 어텐션 연산을 수행한 뒤 concat연산을 수행한다. 그 뒤 다시 행렬곱을 통해, 차원을 입력벡터와 동일하게 한다.
   2. !![img](/postImages/스크린샷 2025-04-29 오전 10.51.47.png)
   3. 입력에 적용되는 행렬곱의 W는 모두 **학습가능**한 값 이기 때문에, 단어에 들어있는 어려가지의 정보(감정의정도, 문맥, 화자, 의미등등)을 나누어 학습할수있다. 또한 병렬처리가 가능하기때문에 GPU를 사용하면 학습 시간을 줄일수있다.
2. Feed Forward Network
   1. 선형변환 - 활성화함수(ReLU) - 선형변환 의 형태로 차원을 대폭 늘려, 의미를 풍부하게 한다(?)
   2. 선형변환에 들어가는 가중치 와 편향 모두 **학습가능**한 값이다.
3. Embedding
   1. 단어를 벡터로 변환하는 함수다. 임베딩또한 **학습가능**하지만, 위의 함수들처럼 학습되는것이 아닌, 이미 학습이 끝난 모델을 사용한다.
   2. 출력/입력 임베딩과 확률출력단에 있는 선형변환은 동일한 가중치를 공유하여, 모델크기를 줄이고, 혼동을 줄인다.

다음은 해당 논문에서 어텐션을 활용하는 3가지 방식이다.

1. Encoder-Decoder Attention
   1. 어텐션의 쿼리는 디코더에서, 키와 벨류는 인코더에서 가져온다.
2. Self-Attention
   1. Encoder-Encoder
      1. 모든 쿼리, 키, 벨류는 이전 레이어의 인코더에서 받아온다.
   2. Decoder-Decoder
      1. 모든 쿼리, 키, 벨류는 이전 레이어의 디코더에서 받아온다.
      2. 다만 디코더의 경우 아직 생성되지 않은 오른쪽의 위치한 단어가 현제 단어에 미치는 영향을 막아야한다.(need to prevent leftward information flow)
      3. 그렇기때문에 이 경우, 현제 단어 우측에 위치하는 단어에 대하여 소프트맥스 함수를 거칠때 모두 -∞으로 치환한다.(이 경우 소프트맥스를 거치면 확률이 0에 수렴하기 때문에)(Masking)

다음은 셀프 어텐션을 사용하는 이유이다.
![img](/postImages/스크린샷 2025-04-29 오전 11.40.47.png)

1. 계산 복잡성
   1. self-attention의 계산복잡성은 O(n^2 _ d), 제한된 self-attention은 O(r _ n _ d) 로 CNN과, RNN의 핵심연산인 Convolutional O(k _ n _ d^2) ,Recurrent O(n _ d^2) 와 비교해 쉬운 연산이다
2. 병렬화 가능성
   1. self-attention은 각 단어에따라 독립적인 연산이기때문에 병렬화가 가능하다.
3. 장거리 의존성간 경로길이(Path Length for Long-Range Dependencies)(?)
   1. 단 한번의 연산으로 모든 단어와의 관계가 연결된다.

#### 3.2 강점 분석

- **참신성 및 독창성:** 기존의 신경망 기반의 언어모델의 단점을 해소하고, 성능면에서도 더 나은 성과
- **이론적 기여도:** 25년 현제 기준 거의 대부분의 llm의 기반논문

#### 3.3 약점 및 개선점 분석

1. 전반적인 자연어 처리를 목적으로 아키텍처이지만, 벤치마크는 번역에 대한 벤치마크만 있는점
2. 개인적으로 아쉬운건.. 기존 RNN, CNN, seq2seq에 대한 내용은 너무 없다.. 읽기 힘들다.

---

### 4. 결론

- **종합 평가:** 향후 자연어처리 모델에 지대한 영향을 준 논문으로, 독창적이고 과감한 접근방식(NN에서의 탈피), 기반지식이 있다면 읽는것조차 명쾌하고 좋은 논문

---
]]></content:encoded>
            <author>leejongmin774@gmail.com (Cree)</author>
            <category>논문</category>
            <category>리뷰</category>
            <enclosure url="https://cree-devblog.kro.kr/images/그냥크리.jpeg" length="0" type="image/jpeg"/>
        </item>
    </channel>
</rss>