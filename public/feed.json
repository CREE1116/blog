{
    "version": "https://jsonfeed.org/version/1",
    "title": "크리의 끄적끄적",
    "home_page_url": "https://cree-devblog.net",
    "feed_url": "https://cree-devblog.net/json",
    "description": "간단한 개발을 하는 크리의 블로그 입니다",
    "icon": "https://cree-devblog.net/java-jeans.jpg",
    "author": {
        "name": "Cree",
        "url": "https://cree-devblog.net"
    },
    "items": [
        {
            "id": "2023_03_29_첫글.mdx",
            "content_html": "\n---\n\n# 블로그를 만든 이유\n\n- 그래도 한명의 컴공과 학생으로써 기술 블로그 하나는 있어야 하지 않나 라는 생각을 했었다.\n  그렇게 velog등등 이것저것 맛을 봤는데, 편하고 좋기는 하지만 그래도 내가 코딩을 하는 인간인데 한번쯤 만들어보는것이 좋지 않나 하여 이렇게 기본적인 블로그를 만들었다.\n\n# 사용한 스텍\n\n- Next.js\n- React.js\n- ContantLayer\n\n앞으로 무언가 만들게 된다면 그 과정을 이곳에 기록할 예정이며, 포스트 뿐만 아니라 기능상으로도 업데이트를 통해 좀더 블로그 구실을 하는 블로그를 만들어 볼까 한다.\n",
            "url": "https://cree-devblog.net/blog/2023_03_29_첫글",
            "title": "첫 글",
            "summary": "블로그 제작후 첫 소감",
            "date_modified": "2023-03-29T00:00:00.000Z",
            "author": {
                "name": "Cree",
                "url": "https://cree-devblog.net"
            },
            "tags": [
                "블로그",
                "첫글"
            ]
        },
        {
            "id": "2023_03_30_ProgressBar+Comment.mdx",
            "content_html": "\n---\n\n# 개발할 부분 선정 이유\n\n### ProgressBar\n\n    이야 이거 멋있다!\n\n참고용으로 다른 분들의 블로그를 찾아볼때마다 눈에 들어오던것이었다.\n사실 막 그닥 필요한 장치는 아니지만 막 어려워 보이지 않아서 만들어보기로 했다\n\n### Comment\n\n    블로그라면 있어야지!\n\n기술블로그니까! 있어야지! 라는 마음으로 도입해보기로 했다.\n\n---\n\n## ProgressBar\n\nprogressbar의 작동원리는 이렇다.\n\n1. 페이지 로드시 지금 스크롤과 뷰포트를 읽어와 퍼센트로 변환한다.\n2. 스크롤 리스너를 통해 스크롤이 발생할때마다 읽어온다.\n3. 읽어온 스크롤 퍼센트(?)에 따라 ProgressBar의 X를 Translate를 통해 변화시킨다.\n\n전체 코드는 이렇다.\n\n```javascript\nimport { useEffect, useState } from \"react\";\nconst Progressbar = () => {\n  const [percentage, setPercentage] = useState(100);\n\n  const getScrollPercentage = () => {\n    const scroll = document.documentElement.scrollTop;\n    const scrollHeight = document.documentElement.scrollHeight;\n    const clientHeight = document.documentElement.clientHeight;\n    const viewport = scrollHeight - clientHeight;\n    const percentage = (scroll / viewport) * 100;\n    return setPercentage(percentage);\n  };\n\n  useEffect(() => {\n    getScrollPercentage();\n    window.addEventListener(\"scroll\", getScrollPercentage);\n    return () => window.removeEventListener(\"scroll\", getScrollPercentage);\n  }, []);\n  return (\n    <div className=\"fixed top-0 left-0 right-0\">\n      <div\n        className=\"bg-red-500 h-1\"\n        style={{ transform: `translateX(${percentage - 100}%)` }}\n      />\n    </div>\n  );\n};\nexport default Progressbar;\n```\n\n여기서 `useEffect` 부분을 보면 `getScrollPercentage()`가 한번 호출 되고 난 뒤 윈도우리스너를 등록하는데\n이는 글이 너무 짧아서 스크롤이 발생하지 않는 경우 Progressbar가 0%에서 고정되어있는 현상을 해결하기 위해 작성되었다.\n\n```javascript\nconst getScrollPercentage = () => {\n  const scroll = document.documentElement.scrollTop;\n  const scrollHeight = document.documentElement.scrollHeight;\n  const clientHeight = document.documentElement.clientHeight;\n  const viewport = scrollHeight - clientHeight;\n  const percentage = (scroll / viewport) * 100;\n  return setPercentage(percentage);\n};\n```\n\n이부분은 스크롤을 %로 구하는 부분이다.\n스크롤을 viewport값으로 나눠서 퍼센트로 구하는 코드이다.\n\n```\n<div className=\"fixed top-0 left-0 right-0\">\n  <div\n    className=\"bg-red-500 h-1\"\n    style={{ transform: `translateX(${percentage - 100}%)` }}\n  />\n</div>\n```\n\ntailwindCss 를 사용했으며\n`fixed top-0 left-0 right-0`는 progressbar를 최상단에 고정하는 부분이다.  \n`bg-red-500 h-1`는 progressbar를 빨간색으로 하고, 높이를 정하는 부분이다.  \n`` style={{transform: `translateX(${(percentage - 100)}%)`}} ``는 퍼센트에 따라서 길이를 변형시키는 코드이다.  \n`percentage - 100` 인 이유는 왼쪽부터 오른쪽으로 진행해야 하기 때문이다.\n(궁금하면 그냥 `percentage`해봐라 뭔 소리인지 이해할것이다.)\n\n이렇게 Next.js의 컴포넌트로 구현을 해두었다.\n\n---\n\n### Comment\n\n댓글은 DB를 만들어서 API를 통해 구현해도 되지만 간단한 사이드프로젝트이기때문에 DB구현부터 백앤드 구현은 좀 투머치라고 생각해서 이미 있는 방법들중 Giscus를 이용하기로 했다.\n\ngiscus를 이용하는 이유는 다음과 같다.\n\n1. 일단 공식 문서가 한글화되어있는 점에서 접근성이 편하다.\n2. 깃허브의 토론을 이용하기때문에 깃허브를 사용하는 사람이라면 접근성도, 보기도 좋다.\n3. Next.js용 페키지가 있다...(구현할거 없어서 짱 좋음)\n\n간단하게 사용하는법을 적어두자면  \n[giscus페이지](https://giscus.app/ko)\n\n    1. 깃헙에서 Public으로 레파지토리를 하나 판다(블로그를 배포한다고 파둔 레파지토리가 Public이라면 그냥 그거 써도 된다.)\n    2. 토론 탭을 활성화 시킨다.(세팅 들어가서 General에서 쭉 내리다 보면 있다.)\n    3. giscus문서에 가서 필요한것들을 적는다.(문서 링크는 위쪽에 있다.)\n    4. 나온 값들을 일단 킵해둔다.\n    5. giscus 페키지를 설치한다.\n    \t(React나 Next.js라면\n    \tyarn add @giscus/react\n    \tor\n    \tnpm i @giscus/react)\n    를 통해 설치할수있다.\n    6.잘 쓴다.\n\n다음은 전체 코드이다.\n\n```javascript\nimport Giscus from \"@giscus/react\";\n\nconst Comment = () => {\n  return (\n    <div className=\"border-t-[100px] border-transparent\">\n      <Giscus\n        id=\"comments\"\n        repo=\"내 레파지토리에욧!\"\n        repoId=\"내 레파지토리 아이디에욧!\"\n        category=\"General\"\n        categoryId=\"문서에 기입할거 다 적으면 알아서 나와욧!\"\n        mapping=\"pathname\"\n        reactionsEnabled=\"1\"\n        emitMetadata=\"0\"\n        inputPosition=\"top\"\n        theme=\"light\"\n        lang=\"ko\"\n        loading=\"lazy\"\n      />\n    </div>\n  );\n};\n\nexport default Comment;\n```\n\n(진짜 뭐 없다...)\n\n이렇게 구현된 것들은 지금 이 포스트를 보고있는 지금 만나볼수 있다.\n\n그럼 오늘은 이만.. 자자..\n",
            "url": "https://cree-devblog.net/blog/2023_03_30_ProgressBar+Comment",
            "title": "ProgressBar + Comment 구현",
            "summary": "스크롤에 따른 Progress Bar와 giscus 댓글 기능 구현",
            "date_modified": "2023-03-30T00:00:00.000Z",
            "author": {
                "name": "Cree",
                "url": "https://cree-devblog.net"
            },
            "tags": [
                "Next.js",
                "React",
                "TailwindCss",
                "Giscus",
                "progressbar",
                "comment"
            ]
        }
    ]
}